{"version":3,"file":"static/js/352.4ecf45a8.chunk.js","mappings":"gRACA,EAA6B,qC,kBC+D7B,EAxDyB,WACvB,OAA8BA,EAAAA,EAAAA,WAAS,GAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA4BJ,EAAAA,EAAAA,UAAS,IAArC,eAAOK,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAYF,EAAaG,IAAI,cAEnCC,EAAAA,EAAAA,YAAU,WACR,GAAkB,KAAdF,GAAkC,OAAdA,EAAxB,CAIA,IAAMG,EAAmB,mCAAG,oGAExBX,GAAW,GAFa,UAGLY,EAAAA,EAAAA,IAAaJ,GAHR,OAGlBK,EAHkB,OAIxBT,GAAU,OAAIS,EAAKC,UACnBC,QAAQC,IAAI,qLAA0CH,GACtDE,QAAQC,IACN,6LACAH,EAAKC,SARiB,kDAWxBZ,EAAS,KAAMe,SAXS,yBAaxBjB,GAAW,GAba,6EAAH,qDAgBzBW,GAlBC,CAmBF,GAAE,CAACH,IASJ,OACE,iCACE,yCACA,kBAAMU,SAVW,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACff,EAAgB,CAAEgB,UAAWF,EAAKG,SAASD,UAAUE,QACrDJ,EAAKK,OACN,EAKG,WACE,kBAAOC,KAAK,OAAOC,KAAK,eACxB,mBAAQD,KAAK,SAAb,uBAED5B,IAAW,SAAC8B,EAAA,EAAD,IACX5B,IAAS,wBAAKA,KACf,eAAI6B,UAAWC,EAAf,UACE,SAACC,EAAA,EAAD,CAAYC,MAAO9B,OAErB,SAAC,KAAD,MAGL,C,oFC7DD,EAA6B,+BAA7B,EAAmE,yBAAnE,EAAmG,yB,SCK7F+B,EAAoB,SAAC,GAAe,IAAbD,EAAY,EAAZA,MACrBE,GAAWC,EAAAA,EAAAA,MAEXZ,EAAWS,EAAMI,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,eAAP,OACzB,SAAC,KAAD,CACET,UAAWC,EAEXS,GAAE,iBAAYF,GACdG,MAAO,CAAEC,KAAMP,GAJjB,UAME,yBACE,cAAGL,UAAWC,EAAd,SAA4BQ,OALzBD,EAHkB,IAa3B,OACE,+BACE,eAAIR,UAAWC,EAAf,SAAmCP,KAGxC,EAED,GAAemB,EAAAA,EAAAA,MAAKT,GAEpBA,EAAkBU,aAAe,CAC/BX,MAAO,G,sLC9BHY,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,gCACTC,OAAQ,CACNC,QAAS,sCAIArC,EAAY,mCAAG,WAAMsC,GAAN,yFACHL,EAASpC,IAAI,eAAgB,CAClDuC,OAAQ,CACNE,MAAAA,KAHsB,uBAClBrC,EADkB,EAClBA,KADkB,kBAMnBA,GANmB,2CAAH,sDASZsC,EAAc,mCAAG,sGACLN,EAASpC,IAAI,iBADR,uBACpBI,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,qDAKduC,EAAY,mCAAG,WAAMd,GAAN,yFACHO,EAASpC,IAAT,gBAAsB6B,IADnB,uBAClBzB,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZwC,EAAU,mCAAG,WAAMf,GAAN,yFACDO,EAASpC,IAAT,iBAAuB6B,EAAvB,aADC,uBAChBzB,EADgB,EAChBA,KADgB,kBAEjBA,GAFiB,2CAAH,sDAKVyC,EAAU,mCAAG,WAAMhB,GAAN,yFACDO,EAASpC,IAAT,iBAAuB6B,EAAvB,aADC,uBAChBzB,EADgB,EAChBA,KADgB,kBAEjBA,GAFiB,2CAAH,qD","sources":["webpack://react-homework-template/./src/pages/MoviesSearchPage/moviesSearchPage.module.css?74d1","pages/MoviesSearchPage/MoviesSearchPage.jsx","webpack://react-homework-template/./src/shared/components/MoviesList/moviesList.module.css?6926","shared/components/MoviesList/MoviesList.jsx","shared/services/movies-api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"moviesList\":\"moviesSearchPage_moviesList__f4WHW\",\"item\":\"moviesSearchPage_item__Xn0hW\",\"link\":\"moviesSearchPage_link__f2XQC\"};","import { searchMovies } from 'shared/services/movies-api';\nimport { useSearchParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport Loader from 'modules/Movies/Loader/Loader';\nimport styles from './moviesSearchPage.module.css';\nimport MoviesList from 'shared/components/MoviesList/MoviesList';\n\nconst MoviesSearchPage = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const movieName = searchParams.get('moviename');\n\n  useEffect(() => {\n    if (movieName === '' || movieName === null) {\n      return;\n    }\n\n    const fetchMoviesOnSearch = async () => {\n      try {\n        setLoading(true);\n        const data = await searchMovies(movieName);\n        setMovies([...data.results]);\n        console.log('При запиті нам повертається така data:', data);\n        console.log(\n          'При запиті нам повертається така data.results:',\n          data.results\n        );\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMoviesOnSearch();\n  }, [movieName]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    setSearchParams({ moviename: form.elements.moviename.value });\n    form.reset();\n  };\n\n  return (\n    <>\n      <h2>Find movie:</h2>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" name=\"moviename\" />\n        <button type=\"submit\">Search</button>\n      </form>\n      {loading && <Loader />}\n      {error && <h2>{error}</h2>}\n      <ul className={styles.moviesList}>\n        <MoviesList items={movies} />\n      </ul>\n      <Outlet />\n    </>\n  );\n};\n\nexport default MoviesSearchPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"moviesList\":\"moviesList_moviesList__CGC-e\",\"item\":\"moviesList_item__4fx80\",\"link\":\"moviesList_link__3hWfy\"};","import { memo } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport styles from './moviesList.module.css';\n\nconst PopularMoviesList = ({ items }) => {\n  const location = useLocation();\n\n  const elements = items.map(({ id, original_title }) => (\n    <Link\n      className={styles.item}\n      key={id}\n      to={`/movie/${id}`}\n      state={{ from: location }}\n    >\n      <li>\n        <p className={styles.link}>{original_title}</p>\n      </li>\n    </Link>\n  ));\n\n  return (\n    <>\n      <ul className={styles.moviesList}>{elements}</ul>\n    </>\n  );\n};\n\nexport default memo(PopularMoviesList);\n\nPopularMoviesList.defaultProps = {\n  items: [],\n};\n\nPopularMoviesList.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      original_title: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: '6c7c9c59ab66a934cce9eb83e4c9fd9b',\n  },\n});\n\nexport const searchMovies = async query => {\n  const { data } = await instance.get('search/movie', {\n    params: {\n      query,\n    },\n  });\n  return data;\n};\n\nexport const getMostPopular = async () => {\n  const { data } = await instance.get('movie/popular');\n  return data;\n};\n\nexport const getMovieById = async id => {\n  const { data } = await instance.get(`movie/${id}`);\n  return data;\n};\n\nexport const getCredits = async id => {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n  return data;\n};\n\nexport const getReviews = async id => {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n  return data;\n};\n"],"names":["useState","loading","setLoading","error","setError","movies","setMovies","useSearchParams","searchParams","setSearchParams","movieName","get","useEffect","fetchMoviesOnSearch","searchMovies","data","results","console","log","message","onSubmit","e","preventDefault","form","currentTarget","moviename","elements","value","reset","type","name","Loader","className","styles","MoviesList","items","PopularMoviesList","location","useLocation","map","id","original_title","to","state","from","memo","defaultProps","instance","axios","baseURL","params","api_key","query","getMostPopular","getMovieById","getCredits","getReviews"],"sourceRoot":""}